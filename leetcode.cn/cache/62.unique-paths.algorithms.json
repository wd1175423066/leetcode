{"id":62,"fid":"62","name":"不同路径","slug":"unique-paths","link":"https://leetcode.cn/problems/unique-paths/description/","percent":67.68174477864775,"level":"Medium","category":"algorithms","companies":["bloomberg"],"tags":["array","dynamic-programming"],"totalAC":"575.4K","totalSubmit":"849.9K","likes":1688,"dislikes":0,"desc":"<p>一个机器人位于一个 <code>m x n</code><em> </em>网格的左上角 （起始点在下图中标记为 “Start” ）。</p>\n\n<p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p>\n\n<p>问总共有多少条不同的路径？</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\" />\n<pre>\n<strong>输入：</strong>m = 3, n = 7\n<strong>输出：</strong>28</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>m = 3, n = 2\n<strong>输出：</strong>3\n<strong>解释：</strong>\n从左上角开始，总共有 3 条路径可以到达右下角。\n1. 向右 -> 向下 -> 向下\n2. 向下 -> 向下 -> 向右\n3. 向下 -> 向右 -> 向下\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>m = 7, n = 3\n<strong>输出：</strong>28\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>m = 3, n = 3\n<strong>输出：</strong>6</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= m, n <= 100</code></li>\n\t<li>题目数据保证答案小于等于 <code>2 * 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int uniquePaths(int m, int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int uniquePaths(int m, int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def uniquePaths(self, m: int, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint uniquePaths(int m, int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int UniquePaths(int m, int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function(m, n) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef unique_paths(m, n)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func uniquePaths(m int, n int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def uniquePaths(m: Int, n: Int): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun uniquePaths(m: Int, n: Int): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn unique_paths(m: i32, n: i32) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function uniquePaths($m, $n) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function uniquePaths(m: number, n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (unique-paths m n)\n  (-> exact-integer? exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec unique_paths(M :: integer(), N :: integer()) -> integer().\nunique_paths(M, N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec unique_paths(m :: integer, n :: integer) :: integer\n  def unique_paths(m, n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int uniquePaths(int m, int n) {\n\n  }\n}"}],"testcase":"3\n7","testable":true,"templateMeta":{"name":"uniquePaths","params":[{"name":"m","type":"integer"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}