{"id":96,"fid":"96","name":"不同的二叉搜索树","slug":"unique-binary-search-trees","link":"https://leetcode.cn/problems/unique-binary-search-trees/description/","percent":70.89102140954216,"level":"Medium","category":"algorithms","companies":["snapchat"],"tags":["dynamic-programming","tree"],"totalAC":"337.1K","totalSubmit":"475.4K","likes":2122,"dislikes":0,"desc":"<p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg\" style=\"width: 600px; height: 148px;\" />\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1\n<strong>输出：</strong>1\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= n <= 19</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numTrees(int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numTrees(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numTrees(self, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint numTrees(int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumTrees(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function(n) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef num_trees(n)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numTrees(_ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numTrees(n int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numTrees(n: Int): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numTrees(n: Int): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn num_trees(n: i32) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function numTrees($n) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function numTrees(n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (num-trees n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec num_trees(N :: integer()) -> integer().\nnum_trees(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec num_trees(n :: integer) :: integer\n  def num_trees(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int numTrees(int n) {\n\n  }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"numTrees","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}