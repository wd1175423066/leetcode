{"id":343,"fid":"343","name":"整数拆分","slug":"integer-break","link":"https://leetcode.cn/problems/integer-break/description/","percent":62.34929637491702,"level":"Medium","category":"algorithms","tags":["math","dynamic-programming"],"totalAC":"233.7K","totalSubmit":"374.9K","likes":1073,"dislikes":0,"desc":"<p>给定一个正整数&nbsp;<code>n</code>&nbsp;，将其拆分为 <code>k</code> 个 <strong>正整数</strong> 的和（&nbsp;<code>k &gt;= 2</code>&nbsp;），并使这些整数的乘积最大化。</p>\n\n<p>返回 <em>你可以获得的最大乘积</em>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>n = 2\n<strong>输出: </strong>1\n<strong>解释: </strong>2 = 1 + 1, 1 × 1 = 1。</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入: </strong>n = 10\n<strong>输出: </strong>36\n<strong>解释: </strong>10 = 3 + 3 + 4, 3 ×&nbsp;3 ×&nbsp;4 = 36。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 58</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int integerBreak(int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int integerBreak(int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def integerBreak(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def integerBreak(self, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint integerBreak(int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int IntegerBreak(int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function(n) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef integer_break(n)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func integerBreak(_ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func integerBreak(n int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def integerBreak(n: Int): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun integerBreak(n: Int): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn integer_break(n: i32) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $n\n     * @return Integer\n     */\n    function integerBreak($n) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function integerBreak(n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (integer-break n)\n  (-> exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec integer_break(N :: integer()) -> integer().\ninteger_break(N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec integer_break(n :: integer) :: integer\n  def integer_break(n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int integerBreak(int n) {\n\n  }\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"integerBreak","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}