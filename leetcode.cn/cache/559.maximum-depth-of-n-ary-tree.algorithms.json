{"id":774,"fid":"559","name":"N 叉树的最大深度","slug":"maximum-depth-of-n-ary-tree","link":"https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/description/","percent":74.85538073693925,"level":"Easy","category":"algorithms","tags":["tree","depth-first-search","breadth-first-search"],"totalAC":"133.2K","totalSubmit":"178K","likes":327,"dislikes":0,"desc":"<p>给定一个 N 叉树，找到其最大深度。</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p>\n\n<p class=\"MachineTrans-lang-zh-CN\"> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>5\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树的深度不会超过 <code>1000</code> 。</li>\n\t<li>树的节点数目位于 <code>[0, 10<sup>4</sup>]</code> 之间。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> children;\n\n    Node() {}\n\n    Node(int _val) {\n        val = _val;\n    }\n\n    Node(int _val, vector<Node*> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    int maxDepth(Node* root) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    public int maxDepth(Node root) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\n# Definition for a Node.\nclass Node(object):\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: Node\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val=None, children=None):\n        self.val = val\n        self.children = children\n\"\"\"\n\nclass Solution:\n    def maxDepth(self, root: 'Node') -> int:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for a Node.\n * struct Node {\n *     int val;\n *     int numChildren;\n *     struct Node** children;\n * };\n */\n\nint maxDepth(struct Node* root) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/*\n// Definition for a Node.\npublic class Node {\n    public int val;\n    public IList<Node> children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, IList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n}\n*/\n\npublic class Solution {\n    public int MaxDepth(Node root) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */\n\n/**\n * @param {Node|null} root\n * @return {number}\n */\nvar maxDepth = function(root) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a Node.\n# class Node\n#     attr_accessor :val, :children\n#     def initialize(val)\n#         @val = val\n#         @children = []\n#     end\n# end\n\n# @param {Node} root\n# @return {int}\ndef maxDepth(root)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a Node.\n * public class Node {\n *     public var val: Int\n *     public var children: [Node]\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.children = []\n *     }\n * }\n */\n\nclass Solution {\n    func maxDepth(_ root: Node?) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for a Node.\n * type Node struct {\n *     Val int\n *     Children []*Node\n * }\n */\n\nfunc maxDepth(root *Node) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for a Node.\n * class Node(var _value: Int) {\n *   var value: Int = _value\n *   var children: List[Node] = List()\n * }\n */\n\nobject Solution {\n    def maxDepth(root: Node): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for a Node.\n * class Node(var `val`: Int) {\n *     var children: List<Node?> = listOf()\n * }\n */\n\nclass Solution {\n    fun maxDepth(root: Node?): Int {\n        \n    }\n}"},{"value":"php","text":"PHP","defaultCode":"/**\n * Definition for a Node.\n * class Node {\n *     public $val = null;\n *     public $children = null;\n *     function __construct($val = 0) {\n *         $this->val = $val;\n *         $this->children = array();\n *     }\n * }\n */\n\nclass Solution {\n    /**\n     * @param Node $root\n     * @return integer\n     */\n    function maxDepth($root) {\n    \t\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n * Definition for Node.\n * class Node {\n *     val: number\n *     children: Node[]\n *     constructor(val?: number, children?: Node[]) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.children = (children===undefined ? [] : children)\n *     }\n * }\n */\n\nfunction maxDepth(root: Node | null): number {\n    \n};"}],"testcase":"[1,null,3,2,4,null,5,6]","testable":true,"templateMeta":{"name":"maxDepth","params":[{"name":"root","type":"integer"}],"return":{"type":"integer"},"languages":["cpp","java","python","csharp","javascript","python3","golang","ruby","c","kotlin","scala","php","swift","typescript"],"manual":true}}