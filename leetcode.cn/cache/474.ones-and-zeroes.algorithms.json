{"id":474,"fid":"474","name":"一和零","slug":"ones-and-zeroes","link":"https://leetcode.cn/problems/ones-and-zeroes/description/","percent":64.57553230543319,"level":"Medium","category":"algorithms","companies":["google"],"tags":["dynamic-programming"],"totalAC":"143.9K","totalSubmit":"222.4K","likes":879,"dislikes":0,"desc":"<p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p>\n\n<div class=\"MachineTrans-Lines\">\n<p class=\"MachineTrans-lang-zh-CN\">请你找出并返回 <code>strs</code> 的最大子集的长度，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p>\n\n<p class=\"MachineTrans-lang-zh-CN\">如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>strs = [\"10\", \"0001\", \"111001\", \"1\", \"0\"], m = 5, n = 3\n<strong>输出：</strong>4\n<strong>解释：</strong>最多有 5 个 0 和 3 个 1 的最大子集是 {\"10\",\"0001\",\"1\",\"0\"} ，因此答案是 4 。\n其他满足题意但较小的子集包括 {\"0001\",\"1\"} 和 {\"10\",\"1\",\"0\"} 。{\"111001\"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>strs = [\"10\", \"0\", \"1\"], m = 1, n = 1\n<strong>输出：</strong>2\n<strong>解释：</strong>最大的子集是 {\"0\", \"1\"} ，所以答案是 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 600</code></li>\n\t<li><code>1 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code>&nbsp;仅由&nbsp;<code>'0'</code> 和&nbsp;<code>'1'</code> 组成</li>\n\t<li><code>1 &lt;= m, n &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findMaxForm(vector<string>& strs, int m, int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findMaxForm(self, strs, m, n):\n        \"\"\"\n        :type strs: List[str]\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint findMaxForm(char ** strs, int strsSize, int m, int n){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindMaxForm(string[] strs, int m, int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function(strs, m, n) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} strs\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef find_max_form(strs, m, n)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaxForm(_ strs: [String], _ m: Int, _ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMaxForm(strs []string, m int, n int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaxForm(strs: Array[String], m: Int, n: Int): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMaxForm(strs: Array<String>, m: Int, n: Int): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_max_form(strs: Vec<String>, m: i32, n: i32) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $strs\n     * @param Integer $m\n     * @param Integer $n\n     * @return Integer\n     */\n    function findMaxForm($strs, $m, $n) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function findMaxForm(strs: string[], m: number, n: number): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-max-form strs m n)\n  (-> (listof string?) exact-integer? exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_max_form(Strs :: [unicode:unicode_binary()], M :: integer(), N :: integer()) -> integer().\nfind_max_form(Strs, M, N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_max_form(strs :: [String.t], m :: integer, n :: integer) :: integer\n  def find_max_form(strs, m, n) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findMaxForm(List<String> strs, int m, int n) {\n\n  }\n}"}],"testcase":"[\"10\",\"0001\",\"111001\",\"1\",\"0\"]\n5\n3","testable":true,"templateMeta":{"name":"findMaxForm","params":[{"name":"strs","type":"string[]"},{"name":"m","type":"integer"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}