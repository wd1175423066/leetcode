{"id":1128,"fid":"1047","name":"删除字符串中的所有相邻重复项","slug":"remove-all-adjacent-duplicates-in-string","link":"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/","percent":72.5842522786092,"level":"Easy","category":"algorithms","tags":["stack"],"totalAC":"211.8K","totalSubmit":"291.5K","likes":495,"dislikes":0,"desc":"<p>给出由小写字母组成的字符串&nbsp;<code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p>\n\n<p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p>\n\n<p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre><strong>输入：</strong>&quot;abbaca&quot;\n<strong>输出：</strong>&quot;ca&quot;\n<strong>解释：</strong>\n例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>1 &lt;= S.length &lt;= 20000</code></li>\n\t<li><code>S</code> 仅由小写英文字母组成。</li>\n</ol>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string removeDuplicates(string s) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String removeDuplicates(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeDuplicates(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeDuplicates(self, s: str) -> str:"},{"value":"c","text":"C","defaultCode":"\n\nchar * removeDuplicates(char * s){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string RemoveDuplicates(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar removeDuplicates = function(s) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef remove_duplicates(s)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeDuplicates(_ s: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeDuplicates(s string) string {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeDuplicates(s: String): String = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeDuplicates(s: String): String {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn remove_duplicates(s: String) -> String {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function removeDuplicates($s) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function removeDuplicates(s: string): string {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (remove-duplicates s)\n  (-> string? string?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec remove_duplicates(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nremove_duplicates(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec remove_duplicates(s :: String.t) :: String.t\n  def remove_duplicates(s) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String removeDuplicates(String s) {\n\n  }\n}"}],"testcase":"\"abbaca\"","testable":true,"templateMeta":{"name":"removeDuplicates","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}