{"id":188,"fid":"188","name":"买卖股票的最佳时机 IV","slug":"best-time-to-buy-and-sell-stock-iv","link":"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/","percent":43.83961047960483,"level":"Hard","category":"algorithms","tags":["dynamic-programming"],"totalAC":"167.7K","totalSubmit":"382.5K","likes":864,"dislikes":0,"desc":"<p>给定一个整数数组 <code>prices</code> ，它的第<em> </em><code>i</code> 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code><em> </em>天的价格。</p>\n\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>k</strong> 笔交易。</p>\n\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>k = 2, prices = [2,4,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>k = 2, prices = [3,2,6,5,0,3]\n<strong>输出：</strong>7\n<strong>解释：</strong>在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= k <= 100</code></li>\n\t<li><code>0 <= prices.length <= 1000</code></li>\n\t<li><code>0 <= prices[i] <= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxProfit(int k, vector<int>& prices) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxProfit(int k, int[] prices) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxProfit(self, k: int, prices: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint maxProfit(int k, int* prices, int pricesSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxProfit(int k, int[] prices) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} k\n * @param {number[]} prices\n * @return {number}\n */\nvar maxProfit = function(k, prices) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} k\n# @param {Integer[]} prices\n# @return {Integer}\ndef max_profit(k, prices)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxProfit(_ k: Int, _ prices: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxProfit(k int, prices []int) int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxProfit(k: Int, prices: Array[Int]): Int = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxProfit(k: Int, prices: IntArray): Int {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_profit(k: i32, prices: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $k\n     * @param Integer[] $prices\n     * @return Integer\n     */\n    function maxProfit($k, $prices) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxProfit(k: number, prices: number[]): number {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-profit k prices)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_profit(K :: integer(), Prices :: [integer()]) -> integer().\nmax_profit(K, Prices) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_profit(k :: integer, prices :: [integer]) :: integer\n  def max_profit(k, prices) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxProfit(int k, List<int> prices) {\n\n  }\n}"}],"testcase":"2\n[2,4,1]","testable":true,"templateMeta":{"name":"maxProfit","params":[{"name":"k","type":"integer"},{"name":"prices","type":"integer[]"}],"return":{"type":"integer"}}}